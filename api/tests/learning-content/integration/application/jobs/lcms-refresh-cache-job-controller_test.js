import { LcmsRefreshCacheJobController } from '../../../../../src/learning-content/application/jobs/lcms-refresh-cache-job-controller.js';
import { catchErr, databaseBuilder, expect, knex, nock } from '../../../../test-helper.js';

describe('Learning Content | Integration | Application | Jobs | Refresh cache', function () {
  let lcmsRefreshCacheJobController;
  let lcmsApiCall;
  let newLearningContent;

  beforeEach(async function () {
    lcmsRefreshCacheJobController = new LcmsRefreshCacheJobController();
    newLearningContent = {
      frameworks: [
        { id: 'aboutToBeRefreshedFrameworkId', name: 'name About to be refreshed Framework - new' },
        { id: 'untouchedFrameworkId', name: 'name Untouched Framework' },
        { id: 'newFrameworkId', name: 'name New Framework' },
      ],
      areas: [
        {
          id: 'aboutToBeRefreshedAreaId',
          name: 'name About to be refreshed Domaine - new',
          code: 'code About to be refreshed Domaine - new',
          title_i18n: {
            fr: 'title_i18n FR About to be refreshed Domaine - new',
            en: 'title_i18n EN About to be refreshed Domaine - new',
          },
          color: 'color About to be refreshed Domaine - new',
          frameworkId: 'frameworkId About to be refreshed Domaine - new',
          competenceIds: ['competenceId1 About to be refreshed Domaine - new'],
        },
        {
          id: 'untouchedAreaId',
          name: 'name Untouched Domaine',
          code: 'code Untouched Domaine',
          title_i18n: { fr: 'title_i18n FR Untouched Domaine', nl: 'title_i18n NL Untouched Domaine' },
          color: 'color Untouched Domaine',
          frameworkId: 'frameworkId Untouched Domaine',
          competenceIds: ['competenceId Untouched Domaine'],
        },
        {
          id: 'newAreaId',
          name: 'name New Domaine',
          code: 'code New Domaine',
          title_i18n: { fr: 'title_i18n FR New Domaine', nl: 'title_i18n NL New Domaine' },
          color: 'color New Domaine',
          frameworkId: 'frameworkId New Domaine',
          competenceIds: ['competenceId1 New Domaine', 'competenceId2 New Domaine'],
        },
      ],
      competences: [
        {
          id: 'aboutToBeRefreshedCompetenceId',
          index: 'index About to be refreshed Competence - new',
          areaId: 'areaId About to be refreshed Competence - new',
          skillIds: ['skillId About to be refreshed Competence - new'],
          thematicIds: ['thematicId About to be refreshed Competence - new'],
          origin: 'origin About to be refreshed Competence - new',
          name_i18n: {
            fr: 'name_i18n FR About to be refreshed Competence - new',
            en: 'name_i18n EN About to be refreshed Competence - new',
          },
          description_i18n: {
            fr: 'description_i18n FR About to be refreshed Competence - new',
            nl: 'description_i18n NL About to be refreshed Competence - new',
          },
        },
        {
          id: 'untouchedCompetenceId',
          index: 'index Untouched Competence',
          areaId: 'areaId Untouched Competence',
          skillIds: ['skillId Untouched Competence'],
          thematicIds: ['thematicId Untouched Competence'],
          origin: 'origin Untouched Competence',
          name_i18n: {
            fr: 'name_i18n FR Untouched Competence',
            en: 'name_i18n EN Untouched Competence',
          },
          description_i18n: {
            fr: 'description_i18n FR Untouched Competence',
            nl: 'description_i18n NL Untouched Competence',
          },
        },
        {
          id: 'newCompetenceId',
          index: 'index New Competence',
          areaId: 'areaId New Competence',
          skillIds: ['skillId New Competence'],
          thematicIds: ['thematicId New Competence'],
          origin: 'origin New Competence',
          name_i18n: {
            fr: 'name_i18n FR New Competence',
            en: 'name_i18n EN New Competence',
          },
          description_i18n: {
            fr: 'description_i18n FR New Competence',
            nl: 'description_i18n NL New Competence',
          },
        },
      ],
      thematics: [
        {
          id: 'aboutToBeRefreshedThematicId',
          name_i18n: {
            fr: 'name_i18n FR About to be refreshed Thematique - new',
            nl: 'name_i18n NL About to be refreshed Thematique - new',
          },
          index: 11,
          competenceId: 'competenceId About to be refreshed Thematique - new',
          tubeIds: ['tubeId About to be refreshed Thematique - new'],
        },
        {
          id: 'untouchedThematicId',
          name_i18n: {
            fr: 'name_i18n FR Untouched Thematique',
            en: 'name_i18n EN Untouched Thematique',
          },
          index: 2,
          competenceId: 'competenceId Untouched Thematique',
          tubeIds: ['tubeId Untouched Thematique'],
        },
        {
          id: 'newThematicId',
          name_i18n: {
            fr: 'name_i18n FR New Thematique',
            en: 'name_i18n EN New Thematique',
          },
          index: 3,
          competenceId: 'competenceId New Thematique',
          tubeIds: ['tubeId New Thematique'],
        },
      ],
      tubes: [
        {
          id: 'aboutToBeRefreshedTubeId',
          name: 'name About to be refreshed Tube - new',
          title: 'title About to be refreshed Tube - new',
          description: 'description About to be refreshed Tube - new',
          practicalTitle_i18n: {
            fr: 'practicalTitle FR About to be refreshed Tube - new',
            nl: 'practicalTitle NL About to be refreshed Tube - new',
          },
          practicalDescription_i18n: {
            fr: 'practicalDescription FR About to be refreshed Tube - new',
            en: 'practicalDescription EN About to be refreshed Tube - new',
          },
          competenceId: 'competenceId About to be refreshed Tube - new',
          thematicId: 'thematicId About to be refreshed Tube - new',
          skillIds: ['skillId About to be refreshed Tube - new'],
          isMobileCompliant: true,
          isTabletCompliant: true,
        },
        {
          id: 'untouchedTubeId',
          name: 'name Untouched Tube',
          title: 'title Untouched Tube',
          description: 'description Untouched Tube',
          practicalTitle_i18n: {
            fr: 'practicalTitle FR Untouched Tube',
            en: 'practicalTitle EN Untouched Tube',
          },
          practicalDescription_i18n: {
            fr: 'practicalDescription FR Untouched Tube',
            en: 'practicalDescription EN Untouched Tube',
          },
          competenceId: 'competenceId Untouched Tube',
          thematicId: 'thematicId Untouched Tube',
          skillIds: ['skillId Untouched Tube'],
          isMobileCompliant: false,
          isTabletCompliant: true,
        },
        {
          id: 'newTubeId',
          name: 'name New Tube',
          title: 'title New Tube',
          description: 'description New Tube',
          practicalTitle_i18n: {
            fr: 'practicalTitle FR New Tube',
            en: 'practicalTitle EN New Tube',
          },
          practicalDescription_i18n: {
            fr: 'practicalDescription FR New Tube',
            en: 'practicalDescription EN New Tube',
          },
          competenceId: 'competenceId New Tube',
          thematicId: 'thematicId New Tube',
          skillIds: ['skillId New Tube'],
          isMobileCompliant: true,
          isTabletCompliant: false,
        },
      ],
      skills: [
        {
          id: 'aboutToBeRefreshedSkillId',
          name: 'name about to be refreshed skill - new',
          hintStatus: 'hintStatus about to be refreshed skill - new',
          tutorialIds: [
            'tutorialId1 about to be refreshed skill - new',
            'tutorialId2 about to be refreshed skill - new',
          ],
          learningMoreTutorialIds: [
            'learningMoreTutorialId1 about to be refreshed skill - new',
            'learningMoreTutorialId2 about to be refreshed skill - new',
          ],
          pixValue: 2,
          competenceId: 'competenceId about to be refreshed skill - new',
          status: 'status about to be refreshed skill - new',
          tubeId: 'tubeId about to be refreshed skill - new',
          version: 2,
          level: 2,
          hint_i18n: {
            fr: 'hint_i18n.fr about to be refreshed skill - new',
            en: 'hint_i18n.en about to be refreshed skill - new',
            nl: 'hint_i18n.nl about to be refreshed skill - new',
          },
        },
        {
          id: 'untouchedSkillId',
          name: 'name untouched skill',
          hintStatus: 'hintStatus untouched skill',
          tutorialIds: ['tutorialId1 untouched skill', 'tutorialId2 untouched skill'],
          learningMoreTutorialIds: [
            'learningMoreTutorialId1 untouched skill',
            'learningMoreTutorialId2 untouched skill',
          ],
          pixValue: 3,
          competenceId: 'competenceId untouched skill',
          status: 'status untouched skill',
          tubeId: 'tubeId untouched skill',
          version: 3,
          level: 3,
          hint_i18n: {
            fr: 'hint_i18n.fr untouched skill',
            en: 'hint_i18n.en untouched skill',
            nl: 'hint_i18n.nl untouched skill',
          },
        },
        {
          id: 'newSkillId',
          name: 'name new skill',
          hintStatus: 'hintStatus new skill',
          tutorialIds: ['tutorialId1 new skill', 'tutorialId2 new skill'],
          learningMoreTutorialIds: ['learningMoreTutorialId1 new skill', 'learningMoreTutorialId2 new skill'],
          pixValue: 4,
          competenceId: 'competenceId new skill',
          status: 'status new skill',
          tubeId: 'tubeId new skill',
          version: 4,
          level: 4,
          hint_i18n: {
            fr: 'hint_i18n.fr new skill',
            en: 'hint_i18n.en new skill',
            nl: 'hint_i18n.nl new skill',
          },
        },
      ],
      challenges: [
        {
          id: 'aboutToBeRefreshedChallengeId',
          instruction: 'instruction About to be refreshed Epreuve - new',
          alternativeInstruction: 'alternativeInstruction About to be refreshed Epreuve - new',
          proposals: 'proposals About to be refreshed Epreuve - new',
          type: 'type About to be refreshed Epreuve - new',
          solution: 'solution About to be refreshed Epreuve - new',
          solutionToDisplay: 'solutionToDisplay About to be refreshed Epreuve - new',
          t1Status: true,
          t2Status: true,
          t3Status: true,
          status: 'status About to be refreshed Epreuve - new',
          genealogy: 'genealogy About to be refreshed Epreuve - new',
          accessibility1: 'accessibility1 About to be refreshed Epreuve - new',
          accessibility2: 'accessibility2 About to be refreshed Epreuve - new',
          requireGafamWebsiteAccess: true,
          isIncompatibleIpadCertif: true,
          deafAndHardOfHearing: 'deafAndHardOfHearing About to be refreshed Epreuve - new',
          isAwarenessChallenge: true,
          toRephrase: true,
          alternativeVersion: 8,
          shuffled: true,
          illustrationAlt: 'illustrationAlt About to be refreshed Epreuve - new',
          illustrationUrl: 'illustrationUrl About to be refreshed Epreuve - new',
          attachments: [
            'attachment1 About to be refreshed Epreuve - new',
            'attachment2 About to be refreshed Epreuve - new',
          ],
          responsive: 'responsive About to be refreshed Epreuve - new',
          alpha: 1.1,
          delta: 3.3,
          autoReply: true,
          focusable: true,
          format: 'format About to be refreshed Epreuve - new',
          timer: 180,
          embedHeight: 800,
          embedUrl: 'embedUrl About to be refreshed Epreuve - new',
          embedTitle: 'embedTitle About to be refreshed Epreuve - new',
          locales: ['fr'],
          competenceId: 'competenceId About to be refreshed Epreuve - new',
          skillId: 'skillId About to be refreshed Epreuve - new',
        },
        {
          id: 'untouchedChallengeId',
          instruction: 'instruction Untouched Epreuve',
          alternativeInstruction: 'alternativeInstruction Untouched Epreuve',
          proposals: 'proposals Untouched Epreuve',
          type: 'type Untouched Epreuve',
          solution: 'solution Untouched Epreuve',
          solutionToDisplay: 'solutionToDisplay Untouched Epreuve',
          t1Status: false,
          t2Status: true,
          t3Status: false,
          status: 'status Untouched Epreuve',
          genealogy: 'genealogy Untouched Epreuve',
          accessibility1: 'accessibility1 Untouched Epreuve',
          accessibility2: 'accessibility2 Untouched Epreuve',
          requireGafamWebsiteAccess: true,
          isIncompatibleIpadCertif: false,
          deafAndHardOfHearing: 'deafAndHardOfHearing Untouched Epreuve',
          isAwarenessChallenge: true,
          toRephrase: true,
          alternativeVersion: 5,
          shuffled: false,
          illustrationAlt: 'illustrationAlt Untouched Epreuve',
          illustrationUrl: 'illustrationUrl Untouched Epreuve',
          attachments: [],
          responsive: 'responsive Untouched Epreuve',
          alpha: 77,
          delta: 66,
          autoReply: true,
          focusable: false,
          format: 'format Untouched Epreuve',
          timer: null,
          embedHeight: 1800,
          embedUrl: 'embedUrl Untouched Epreuve',
          embedTitle: 'embedTitle Untouched Epreuve',
          locales: ['fr', 'en'],
          competenceId: 'competenceId Untouched Epreuve',
          skillId: 'skillId Untouched Epreuve',
        },
        {
          id: 'newChallengeId',
          instruction: 'instruction New Epreuve',
          alternativeInstruction: 'alternativeInstruction New Epreuve',
          proposals: 'proposals New Epreuve',
          type: 'type New Epreuve',
          solution: 'solution New Epreuve',
          solutionToDisplay: 'solutionToDisplay New Epreuve',
          t1Status: false,
          t2Status: false,
          t3Status: true,
          status: 'status New Epreuve',
          genealogy: 'genealogy New Epreuve',
          accessibility1: 'accessibility1 New Epreuve',
          accessibility2: 'accessibility2 New Epreuve',
          requireGafamWebsiteAccess: false,
          isIncompatibleIpadCertif: true,
          deafAndHardOfHearing: 'deafAndHardOfHearing New Epreuve',
          isAwarenessChallenge: false,
          toRephrase: true,
          alternativeVersion: 15,
          shuffled: true,
          illustrationAlt: 'illustrationAlt New Epreuve',
          illustrationUrl: 'illustrationUrl New Epreuve',
          attachments: ['attachment1 New Epreuve'],
          responsive: 'responsive New Epreuve',
          alpha: 100.1,
          delta: 200.2,
          autoReply: false,
          focusable: true,
          format: 'format New Epreuve',
          timer: 250,
          embedHeight: null,
          embedUrl: 'embedUrl New Epreuve',
          embedTitle: 'embedTitle New Epreuve',
          locales: ['fr', 'nl'],
          competenceId: 'competenceId New Epreuve',
          skillId: 'skillId New Epreuve',
        },
      ],
      courses: [
        {
          id: 'aboutToBeRefreshedCourseId',
          name: 'name About to be refreshed Course - new',
          description: 'description About to be refreshed Course - new',
          isActive: true,
          competences: ['competenceId About to be refreshed Course - new'],
          challenges: ['challengeId About to be refreshed Course - new'],
        },
        {
          id: 'untouchedCourseId',
          name: 'name Untouched',
          description: 'description Untouched',
          isActive: false,
          competences: ['competenceId Untouched'],
          challenges: ['challengeId Untouched'],
        },
        {
          id: 'newCourseId',
          name: 'name New',
          description: 'description New',
          isActive: true,
          competences: ['competenceId New'],
          challenges: ['challengeId New'],
        },
      ],
      tutorials: [
        {
          id: 'aboutToBeRefreshedTutorialId',
          duration: 'duration About to be refreshed Tutoriel - new',
          format: 'format About to be refreshed Tutoriel - new',
          title: 'title About to be refreshed Tutoriel - new',
          source: 'source About to be refreshed Tutoriel - new',
          link: 'link About to be refreshed Tutoriel - new',
          locale: 'fr',
        },
        {
          id: 'untouchedTutorialId',
          duration: 'duration Untouched Tutorial',
          format: 'format Untouched Tutorial',
          title: 'title Untouched Tutorial',
          source: 'source Untouched Tutorial',
          link: 'link Untouched Tutorial',
          locale: 'nl',
        },
        {
          id: 'newTutorialId',
          duration: 'duration New Tutorial',
          format: 'format New Tutorial',
          title: 'title New Tutorial',
          source: 'source New Tutorial',
          link: 'link New Tutorial',
          locale: 'fr',
        },
      ],
      missions: [
        {
          id: 1,
          status: 'status About to be refreshed Mission - new',
          name_i18n: {
            fr: 'name FR About to be refreshed Mission - new',
            en: 'name EN About to be refreshed Mission - new',
          },
          content: { some: 'content About to be refreshed Mission - new' },
          learningObjectives_i18n: {
            fr: 'learningObjectives FR About to be refreshed Mission - new',
            en: 'learningObjectives EN About to be refreshed Mission - new',
          },
          validatedObjectives_i18n: {
            fr: 'validatedObjectives FR About to be refreshed Mission - new',
            en: 'validatedObjectives EN About to be refreshed Mission - new',
          },
          introductionMediaType: 'introductionMediaType About to be refreshed Mission - new',
          introductionMediaUrl: 'introductionMediaUrl About to be refreshed Mission - new',
          introductionMediaAlt_i18n: {
            fr: 'introductionMediaAlt FR About to be refreshed Mission - new',
            en: 'introductionMediaAlt EN About to be refreshed Mission - new',
          },
          documentationUrl: 'documentationUrl About to be refreshed Mission - new',
          cardImageUrl: 'cardImageUrl About to be refreshed Mission - new',
          competenceId: 'competenceId About to be refreshed Mission - new',
        },
        {
          id: 2,
          status: 'status Untouched Mission',
          name_i18n: {
            fr: 'name FR Untouched Mission',
            en: 'name EN Untouched Mission',
          },
          content: { some: 'content Untouched Mission' },
          learningObjectives_i18n: {
            fr: 'learningObjectives FR Untouched Mission',
            en: 'learningObjectives EN Untouched Mission',
          },
          validatedObjectives_i18n: {
            fr: 'validatedObjectives FR Untouched Mission',
            en: 'validatedObjectives EN Untouched Mission',
          },
          introductionMediaType: 'introductionMediaType Untouched Mission',
          introductionMediaUrl: 'introductionMediaUrl Untouched Mission',
          introductionMediaAlt_i18n: {
            fr: 'introductionMediaAlt FR Untouched Mission',
            en: 'introductionMediaAlt EN Untouched Mission',
          },
          documentationUrl: 'documentationUrl Untouched Mission',
          cardImageUrl: 'cardImageUrl Untouched Mission',
          competenceId: 'competenceId Untouched Mission',
        },
        {
          id: 4,
          status: 'status New Mission',
          name_i18n: {
            fr: 'name FR New Mission',
            en: 'name EN New Mission',
          },
          content: { some: 'content New Mission' },
          learningObjectives_i18n: {
            fr: 'learningObjectives FR New Mission',
            en: 'learningObjectives EN New Mission',
          },
          validatedObjectives_i18n: {
            fr: 'validatedObjectives FR New Mission',
            en: 'validatedObjectives EN New Mission',
          },
          introductionMediaType: 'introductionMediaType New Mission',
          introductionMediaUrl: 'introductionMediaUrl New Mission',
          introductionMediaAlt_i18n: {
            fr: 'introductionMediaAlt FR New Mission',
            en: 'introductionMediaAlt EN New Mission',
          },
          documentationUrl: 'documentationUrl New Mission',
          cardImageUrl: 'cardImageUrl New Mission',
          competenceId: 'competenceId New Mission',
        },
      ],
    };

    databaseBuilder.factory.learningContent.buildFramework({
      id: 'aboutToBeRefreshedFrameworkId',
      name: 'name About to be refreshed Framework - old',
    });
    databaseBuilder.factory.learningContent.buildFramework({
      id: 'untouchedFrameworkId',
      name: 'name Untouched Framework',
    });
    databaseBuilder.factory.learningContent.buildFramework({
      id: 'missingFrameworkId',
      name: 'name Missing Framework',
    });
    databaseBuilder.factory.learningContent.buildArea({
      id: 'aboutToBeRefreshedAreaId',
      name: 'name About to be refreshed Domaine - old',
      code: 'code About to be refreshed Domaine - old',
      title_i18n: {
        fr: 'title_i18n FR About to be refreshed Domaine - old',
        nl: 'title_i18n NL About to be refreshed Domaine - old',
      },
      color: 'color About to be refreshed Domaine - old',
      frameworkId: 'frameworkId About to be refreshed Domaine - old',
      competenceIds: [
        'competenceId1 About to be refreshed Domaine - old',
        'competenceId2 About to be refreshed Domaine - old',
      ],
    });
    databaseBuilder.factory.learningContent.buildArea({
      id: 'untouchedAreaId',
      name: 'name Untouched Domaine',
      code: 'code Untouched Domaine',
      title_i18n: { fr: 'title_i18n FR Untouched Domaine', nl: 'title_i18n NL Untouched Domaine' },
      color: 'color Untouched Domaine',
      frameworkId: 'frameworkId Untouched Domaine',
      competenceIds: ['competenceId Untouched Domaine'],
    });
    databaseBuilder.factory.learningContent.buildArea({
      id: 'missingAreaId',
      name: 'name Missing Domaine',
      code: 'code Missing Domaine',
      title_i18n: { fr: 'title_i18n FR Missing Domaine', nl: 'title_i18n NL Missing Domaine' },
      color: 'color Missing Domaine',
      frameworkId: 'frameworkId Missing Domaine',
      competenceIds: ['competenceId Missing Domaine'],
    });
    databaseBuilder.factory.learningContent.buildCompetence({
      id: 'aboutToBeRefreshedCompetenceId',
      index: 'index About to be refreshed Competence - old',
      areaId: 'areaId About to be refreshed Competence - old',
      skillIds: ['skillId About to be refreshed Competence - old'],
      thematicIds: ['thematicId About to be refreshed Competence - old'],
      origin: 'origin About to be refreshed Competence - old',
      name_i18n: {
        fr: 'name_i18n FR About to be refreshed Competence - old',
        nl: 'name_i18n NL About to be refreshed Competence - old',
      },
      description_i18n: {
        fr: 'description_i18n FR About to be refreshed Competence - old',
        en: 'description_i18n EN About to be refreshed Competence - old',
      },
    });
    databaseBuilder.factory.learningContent.buildCompetence({
      id: 'untouchedCompetenceId',
      index: 'index Untouched Competence',
      areaId: 'areaId Untouched Competence',
      skillIds: ['skillId Untouched Competence'],
      thematicIds: ['thematicId Untouched Competence'],
      origin: 'origin Untouched Competence',
      name_i18n: {
        fr: 'name_i18n FR Untouched Competence',
        en: 'name_i18n EN Untouched Competence',
      },
      description_i18n: {
        fr: 'description_i18n FR Untouched Competence',
        nl: 'description_i18n NL Untouched Competence',
      },
    });
    databaseBuilder.factory.learningContent.buildCompetence({
      id: 'missingCompetenceId',
      index: 'index Missing Competence',
      areaId: 'areaId Missing Competence',
      skillIds: ['skillId Missing Competence'],
      thematicIds: ['thematicId Missing Competence'],
      origin: 'origin Missing Competence',
      name_i18n: {
        fr: 'name_i18n FR Missing Competence',
        en: 'name_i18n EN Missing Competence',
      },
      description_i18n: {
        fr: 'description_i18n FR Missing Competence',
        nl: 'description_i18n NL Missing Competence',
      },
    });
    databaseBuilder.factory.learningContent.buildThematic({
      id: 'aboutToBeRefreshedThematicId',
      name_i18n: {
        fr: 'name_i18n FR About to be refreshed Thematique - old',
        en: 'name_i18n EN About to be refreshed Thematique - old',
      },
      index: 1,
      competenceId: 'competenceId About to be refreshed Thematique - old',
      tubeIds: ['tubeId About to be refreshed Thematique - old'],
    });
    databaseBuilder.factory.learningContent.buildThematic({
      id: 'untouchedThematicId',
      name_i18n: {
        fr: 'name_i18n FR Untouched Thematique',
        en: 'name_i18n EN Untouched Thematique',
      },
      index: 2,
      competenceId: 'competenceId Untouched Thematique',
      tubeIds: ['tubeId Untouched Thematique'],
    });
    databaseBuilder.factory.learningContent.buildThematic({
      id: 'missingThematicId',
      name_i18n: {
        fr: 'name_i18n FR Missing Thematique',
        en: 'name_i18n EN Missing Thematique',
      },
      index: 4,
      competenceId: 'competenceId Missing Thematique',
      tubeIds: ['tubeId Missing Thematique'],
    });
    databaseBuilder.factory.learningContent.buildTube({
      id: 'aboutToBeRefreshedTubeId',
      name: 'name About to be refreshed Tube - old',
      title: 'title About to be refreshed Tube - old',
      description: 'description About to be refreshed Tube - old',
      practicalTitle_i18n: {
        fr: 'practicalTitle FR About to be refreshed Tube - old',
        en: 'practicalTitle EN About to be refreshed Tube - old',
      },
      practicalDescription_i18n: {
        fr: 'practicalDescription FR About to be refreshed Tube - old',
        en: 'practicalDescription EN About to be refreshed Tube - old',
      },
      competenceId: 'competenceId About to be refreshed Tube - old',
      thematicId: 'thematicId About to be refreshed Tube - old',
      skillIds: ['skillId About to be refreshed Tube - old'],
      isMobileCompliant: false,
      isTabletCompliant: true,
    });
    databaseBuilder.factory.learningContent.buildTube({
      id: 'untouchedTubeId',
      name: 'name Untouched Tube',
      title: 'title Untouched Tube',
      description: 'description Untouched Tube',
      practicalTitle_i18n: {
        fr: 'practicalTitle FR Untouched Tube',
        en: 'practicalTitle EN Untouched Tube',
      },
      practicalDescription_i18n: {
        fr: 'practicalDescription FR Untouched Tube',
        en: 'practicalDescription EN Untouched Tube',
      },
      competenceId: 'competenceId Untouched Tube',
      thematicId: 'thematicId Untouched Tube',
      skillIds: ['skillId Untouched Tube'],
      isMobileCompliant: false,
      isTabletCompliant: true,
    });
    databaseBuilder.factory.learningContent.buildTube({
      id: 'missingTubeId',
      name: 'name Missing Tube',
      title: 'title Missing Tube',
      description: 'description Missing Tube',
      practicalTitle_i18n: {
        fr: 'practicalTitle FR Missing Tube',
        en: 'practicalTitle EN Missing Tube',
      },
      practicalDescription_i18n: {
        fr: 'practicalDescription FR Missing Tube',
        en: 'practicalDescription EN Missing Tube',
      },
      competenceId: 'competenceId Missing Tube',
      thematicId: 'thematicId Missing Tube',
      skillIds: ['skillId Missing Tube'],
      isMobileCompliant: true,
      isTabletCompliant: true,
    });
    databaseBuilder.factory.learningContent.buildSkill({
      id: 'aboutToBeRefreshedSkillId',
      name: 'name about to be refreshed skill - old',
      hintStatus: 'hintStatus about to be refreshed skill - old',
      tutorialIds: ['tutorialId1 about to be refreshed skill - old', 'tutorialId2 about to be refreshed skill - old'],
      learningMoreTutorialIds: [
        'learningMoreTutorialId1 about to be refreshed skill - old',
        'learningMoreTutorialId2 about to be refreshed skill - old',
      ],
      pixValue: 1,
      competenceId: 'competenceId about to be refreshed skill - old',
      status: 'status about to be refreshed skill - old',
      tubeId: 'tubeId about to be refreshed skill - old',
      version: 1,
      level: 1,
      hint_i18n: {
        fr: 'hint_i18n.fr about to be refreshed skill - old',
        en: 'hint_i18n.en about to be refreshed skill - old',
        nl: 'hint_i18n.nl about to be refreshed skill - old',
      },
    });
    databaseBuilder.factory.learningContent.buildSkill({
      id: 'untouchedSkillId',
      name: 'name untouched skill',
      hintStatus: 'hintStatus untouched skill',
      tutorialIds: ['tutorialId1 untouched skill', 'tutorialId2 untouched skill'],
      learningMoreTutorialIds: ['learningMoreTutorialId1 untouched skill', 'learningMoreTutorialId2 untouched skill'],
      pixValue: 3,
      competenceId: 'competenceId untouched skill',
      status: 'status untouched skill',
      tubeId: 'tubeId untouched skill',
      version: 3,
      level: 3,
      hint_i18n: {
        fr: 'hint_i18n.fr untouched skill',
        en: 'hint_i18n.en untouched skill',
        nl: 'hint_i18n.nl untouched skill',
      },
    });
    databaseBuilder.factory.learningContent.buildSkill({
      id: 'missingSkillId',
      name: 'name missing skill',
      hintStatus: 'hintStatus missing skill',
      tutorialIds: ['tutorialId1 missing skill', 'tutorialId2 missing skill'],
      learningMoreTutorialIds: ['learningMoreTutorialId1 missing skill', 'learningMoreTutorialId2 missing skill'],
      pixValue: 5,
      competenceId: 'competenceId missing skill',
      status: 'status missing skill',
      tubeId: 'tubeId missing skill',
      version: 5,
      level: 5,
      hint_i18n: {
        fr: 'hint_i18n.fr missing skill',
        en: 'hint_i18n.en missing skill',
        nl: 'hint_i18n.nl missing skill',
      },
    });
    databaseBuilder.factory.learningContent.buildChallenge({
      id: 'aboutToBeRefreshedChallengeId',
      instruction: 'instruction About to be refreshed Epreuve - old',
      alternativeInstruction: 'alternativeInstruction About to be refreshed Epreuve - old',
      proposals: 'proposals About to be refreshed Epreuve - old',
      type: 'type About to be refreshed Epreuve - old',
      solution: 'solution About to be refreshed Epreuve - old',
      solutionToDisplay: 'solutionToDisplay About to be refreshed Epreuve - old',
      t1Status: false,
      t2Status: true,
      t3Status: false,
      status: 'status About to be refreshed Epreuve - old',
      genealogy: 'genealogy About to be refreshed Epreuve - old',
      accessibility1: 'accessibility1 About to be refreshed Epreuve - old',
      accessibility2: 'accessibility2 About to be refreshed Epreuve - old',
      requireGafamWebsiteAccess: true,
      isIncompatibleIpadCertif: true,
      deafAndHardOfHearing: 'deafAndHardOfHearing About to be refreshed Epreuve - old',
      isAwarenessChallenge: false,
      toRephrase: true,
      alternativeVersion: 5,
      shuffled: false,
      illustrationAlt: 'illustrationAlt About to be refreshed Epreuve - old',
      illustrationUrl: 'illustrationUrl About to be refreshed Epreuve - old',
      attachments: ['attachment1 About to be refreshed Epreuve - old'],
      responsive: 'responsive About to be refreshed Epreuve - old',
      alpha: 10.5,
      delta: 3.3,
      autoReply: true,
      focusable: false,
      format: 'format About to be refreshed Epreuve - old',
      timer: 180,
      embedHeight: 2800,
      embedUrl: 'embedUrl About to be refreshed Epreuve - old',
      embedTitle: 'embedTitle About to be refreshed Epreuve - old',
      locales: ['fr', 'nl'],
      competenceId: 'competenceId About to be refreshed Epreuve - old',
      skillId: 'skillId About to be refreshed Epreuve - old',
    });
    databaseBuilder.factory.learningContent.buildChallenge({
      id: 'untouchedChallengeId',
      instruction: 'instruction Untouched Epreuve',
      alternativeInstruction: 'alternativeInstruction Untouched Epreuve',
      proposals: 'proposals Untouched Epreuve',
      type: 'type Untouched Epreuve',
      solution: 'solution Untouched Epreuve',
      solutionToDisplay: 'solutionToDisplay Untouched Epreuve',
      t1Status: false,
      t2Status: true,
      t3Status: false,
      status: 'status Untouched Epreuve',
      genealogy: 'genealogy Untouched Epreuve',
      accessibility1: 'accessibility1 Untouched Epreuve',
      accessibility2: 'accessibility2 Untouched Epreuve',
      requireGafamWebsiteAccess: true,
      isIncompatibleIpadCertif: false,
      deafAndHardOfHearing: 'deafAndHardOfHearing Untouched Epreuve',
      isAwarenessChallenge: true,
      toRephrase: true,
      alternativeVersion: 5,
      shuffled: false,
      illustrationAlt: 'illustrationAlt Untouched Epreuve',
      illustrationUrl: 'illustrationUrl Untouched Epreuve',
      attachments: [],
      responsive: 'responsive Untouched Epreuve',
      alpha: 77,
      delta: 66,
      autoReply: true,
      focusable: false,
      format: 'format Untouched Epreuve',
      timer: null,
      embedHeight: 1800,
      embedUrl: 'embedUrl Untouched Epreuve',
      embedTitle: 'embedTitle Untouched Epreuve',
      locales: ['fr', 'en'],
      competenceId: 'competenceId Untouched Epreuve',
      skillId: 'skillId Untouched Epreuve',
    });
    databaseBuilder.factory.learningContent.buildChallenge({
      id: 'missingChallengeId',
      instruction: 'instruction Missing Epreuve',
      alternativeInstruction: 'alternativeInstruction Missing Epreuve',
      proposals: 'proposals Missing Epreuve',
      type: 'type Missing Epreuve',
      solution: 'solution Missing Epreuve',
      solutionToDisplay: 'solutionToDisplay Missing Epreuve',
      t1Status: false,
      t2Status: true,
      t3Status: true,
      status: 'status Missing Epreuve',
      genealogy: 'genealogy Missing Epreuve',
      accessibility1: 'accessibility1 Missing Epreuve',
      accessibility2: 'accessibility2 Missing Epreuve',
      requireGafamWebsiteAccess: false,
      isIncompatibleIpadCertif: true,
      deafAndHardOfHearing: 'deafAndHardOfHearing Missing Epreuve',
      isAwarenessChallenge: true,
      toRephrase: true,
      alternativeVersion: 99,
      shuffled: true,
      illustrationAlt: 'illustrationAlt Missing Epreuve',
      illustrationUrl: 'illustrationUrl Missing Epreuve',
      attachments: ['attachment8 Missing Epreuve'],
      responsive: 'responsive Missing Epreuve',
      alpha: 58.2,
      delta: 20.4,
      autoReply: true,
      focusable: true,
      format: 'format Missing Epreuve',
      timer: null,
      embedHeight: 55,
      embedUrl: 'embedUrl Missing Epreuve',
      embedTitle: 'embedTitle Missing Epreuve',
      locales: ['en', 'nl'],
      competenceId: 'competenceId Missing Epreuve',
      skillId: 'skillId Missing Epreuve',
    });
    databaseBuilder.factory.learningContent.buildCourse({
      id: 'aboutToBeRefreshedCourseId',
      name: 'name About to be refreshed Course - old',
      description: 'description About to be refreshed Course - old',
      isActive: false,
      competences: [
        'competenceId1 About to be refreshed Course - old',
        'competenceId2 About to be refreshed Course - old',
      ],
      challenges: [
        'challengeId1 About to be refreshed Course - old',
        'challengeId2 About to be refreshed Course - old',
      ],
    });
    databaseBuilder.factory.learningContent.buildCourse({
      id: 'untouchedCourseId',
      name: 'name Untouched',
      description: 'description Untouched',
      isActive: false,
      competences: ['competenceId Untouched'],
      challenges: ['challengeId Untouched'],
    });
    databaseBuilder.factory.learningContent.buildCourse({
      id: 'missingCourseId',
      name: 'name Missing',
      description: 'description Missing',
      isActive: true,
      competences: ['competenceId Missing'],
      challenges: ['challengeId Missing'],
    });
    databaseBuilder.factory.learningContent.buildTutorial({
      id: 'aboutToBeRefreshedTutorialId',
      duration: 'duration About to be refreshed Tutoriel - old',
      format: 'format About to be refreshed Tutoriel - old',
      title: 'title About to be refreshed Tutoriel - old',
      source: 'source About to be refreshed Tutoriel - old',
      link: 'link About to be refreshed Tutoriel - old',
      locale: 'en',
    });
    databaseBuilder.factory.learningContent.buildTutorial({
      id: 'untouchedTutorialId',
      duration: 'duration Untouched Tutorial',
      format: 'format Untouched Tutorial',
      title: 'title Untouched Tutorial',
      source: 'source Untouched Tutorial',
      link: 'link Untouched Tutorial',
      locale: 'nl',
    });
    databaseBuilder.factory.learningContent.buildTutorial({
      id: 'missingTutorialId',
      duration: 'duration Missing Tutorial',
      format: 'format Missing Tutorial',
      title: 'title Missing Tutorial',
      source: 'source Missing Tutorial',
      link: 'link Missing Tutorial',
      locale: 'fr',
    });
    databaseBuilder.factory.learningContent.buildMission({
      id: 1,
      status: 'status About to be refreshed Mission - old',
      name_i18n: {
        fr: 'name FR About to be refreshed Mission - old',
        en: 'name EN About to be refreshed Mission - old',
      },
      content: { some: 'content About to be refreshed Mission - old' },
      learningObjectives_i18n: {
        fr: 'learningObjectives FR About to be refreshed Mission - old',
        en: 'learningObjectives EN About to be refreshed Mission - old',
      },
      validatedObjectives_i18n: {
        fr: 'validatedObjectives FR About to be refreshed Mission - old',
        en: 'validatedObjectives EN About to be refreshed Mission - old',
      },
      introductionMediaType: 'introductionMediaType About to be refreshed Mission - old',
      introductionMediaUrl: 'introductionMediaUrl About to be refreshed Mission - old',
      introductionMediaAlt_i18n: {
        fr: 'introductionMediaAlt FR About to be refreshed Mission - old',
        en: 'introductionMediaAlt EN About to be refreshed Mission - old',
      },
      documentationUrl: 'documentationUrl About to be refreshed Mission - old',
      cardImageUrl: 'cardImageUrl About to be refreshed Mission - old',
      competenceId: 'competenceId About to be refreshed Mission - old',
    });
    databaseBuilder.factory.learningContent.buildMission({
      id: 2,
      status: 'status Untouched Mission',
      name_i18n: {
        fr: 'name FR Untouched Mission',
        en: 'name EN Untouched Mission',
      },
      content: { some: 'content Untouched Mission' },
      learningObjectives_i18n: {
        fr: 'learningObjectives FR Untouched Mission',
        en: 'learningObjectives EN Untouched Mission',
      },
      validatedObjectives_i18n: {
        fr: 'validatedObjectives FR Untouched Mission',
        en: 'validatedObjectives EN Untouched Mission',
      },
      introductionMediaType: 'introductionMediaType Untouched Mission',
      introductionMediaUrl: 'introductionMediaUrl Untouched Mission',
      introductionMediaAlt_i18n: {
        fr: 'introductionMediaAlt FR Untouched Mission',
        en: 'introductionMediaAlt EN Untouched Mission',
      },
      documentationUrl: 'documentationUrl Untouched Mission',
      cardImageUrl: 'cardImageUrl Untouched Mission',
      competenceId: 'competenceId Untouched Mission',
    });
    databaseBuilder.factory.learningContent.buildMission({
      id: 3,
      status: 'status Missing Mission',
      name_i18n: {
        fr: 'name FR Missing Mission',
        en: 'name EN Missing Mission',
      },
      content: { some: 'content Missing Mission' },
      learningObjectives_i18n: {
        fr: 'learningObjectives FR Missing Mission',
        en: 'learningObjectives EN Missing Mission',
      },
      validatedObjectives_i18n: {
        fr: 'validatedObjectives FR Missing Mission',
        en: 'validatedObjectives EN Missing Mission',
      },
      introductionMediaType: 'introductionMediaType Missing Mission',
      introductionMediaUrl: 'introductionMediaUrl Missing Mission',
      introductionMediaAlt_i18n: {
        fr: 'introductionMediaAlt FR Missing Mission',
        en: 'introductionMediaAlt EN Missing Mission',
      },
      documentationUrl: 'documentationUrl Missing Mission',
      cardImageUrl: 'cardImageUrl Missing Mission',
      competenceId: 'competenceId Missing Mission',
    });
    await databaseBuilder.commit();
  });

  afterEach(async function () {
    await knex('learningcontent.frameworks').truncate();
    await knex('learningcontent.areas').truncate();
    await knex('learningcontent.competences').truncate();
    await knex('learningcontent.thematics').truncate();
    await knex('learningcontent.tubes').truncate();
    await knex('learningcontent.challenges').truncate();
    await knex('learningcontent.courses').truncate();
    await knex('learningcontent.tutorials').truncate();
    await knex('learningcontent.missions').truncate();
  });

  describe('#handle', function () {
    context('success', function () {
      beforeEach(function () {
        lcmsApiCall = nock('https://lcms-test.pix.fr/api')
          .get('/releases/latest')
          .matchHeader('Authorization', 'Bearer test-api-key')
          .reply(200, { content: newLearningContent });
      });

      it("should update learning content in database with what's in the latest release", async function () {
        // when
        await lcmsRefreshCacheJobController.handle();

        // then
        const refreshedFrameworks = await knex.select('*').from('learningcontent.frameworks').orderBy('name');
        expect(refreshedFrameworks).to.deep.equal([
          { id: 'aboutToBeRefreshedFrameworkId', name: 'name About to be refreshed Framework - new' },
          { id: 'missingFrameworkId', name: 'name Missing Framework' },
          { id: 'newFrameworkId', name: 'name New Framework' },
          { id: 'untouchedFrameworkId', name: 'name Untouched Framework' },
        ]);
        const refreshedAreas = await knex.select('*').from('learningcontent.areas').orderBy('id');
        expect(refreshedAreas).to.deep.equal([
          {
            id: 'aboutToBeRefreshedAreaId',
            name: 'name About to be refreshed Domaine - new',
            code: 'code About to be refreshed Domaine - new',
            title_i18n: {
              fr: 'title_i18n FR About to be refreshed Domaine - new',
              en: 'title_i18n EN About to be refreshed Domaine - new',
            },
            color: 'color About to be refreshed Domaine - new',
            frameworkId: 'frameworkId About to be refreshed Domaine - new',
            competenceIds: ['competenceId1 About to be refreshed Domaine - new'],
          },
          {
            id: 'missingAreaId',
            name: 'name Missing Domaine',
            code: 'code Missing Domaine',
            title_i18n: { fr: 'title_i18n FR Missing Domaine', nl: 'title_i18n NL Missing Domaine' },
            color: 'color Missing Domaine',
            frameworkId: 'frameworkId Missing Domaine',
            competenceIds: ['competenceId Missing Domaine'],
          },
          {
            id: 'newAreaId',
            name: 'name New Domaine',
            code: 'code New Domaine',
            title_i18n: { fr: 'title_i18n FR New Domaine', nl: 'title_i18n NL New Domaine' },
            color: 'color New Domaine',
            frameworkId: 'frameworkId New Domaine',
            competenceIds: ['competenceId1 New Domaine', 'competenceId2 New Domaine'],
          },
          {
            id: 'untouchedAreaId',
            name: 'name Untouched Domaine',
            code: 'code Untouched Domaine',
            title_i18n: { fr: 'title_i18n FR Untouched Domaine', nl: 'title_i18n NL Untouched Domaine' },
            color: 'color Untouched Domaine',
            frameworkId: 'frameworkId Untouched Domaine',
            competenceIds: ['competenceId Untouched Domaine'],
          },
        ]);
        const refreshedCompetences = await knex.select('*').from('learningcontent.competences').orderBy('id');
        expect(refreshedCompetences).to.deep.equal([
          {
            id: 'aboutToBeRefreshedCompetenceId',
            index: 'index About to be refreshed Competence - new',
            areaId: 'areaId About to be refreshed Competence - new',
            skillIds: ['skillId About to be refreshed Competence - new'],
            thematicIds: ['thematicId About to be refreshed Competence - new'],
            origin: 'origin About to be refreshed Competence - new',
            name_i18n: {
              fr: 'name_i18n FR About to be refreshed Competence - new',
              en: 'name_i18n EN About to be refreshed Competence - new',
            },
            description_i18n: {
              fr: 'description_i18n FR About to be refreshed Competence - new',
              nl: 'description_i18n NL About to be refreshed Competence - new',
            },
          },
          {
            id: 'missingCompetenceId',
            index: 'index Missing Competence',
            areaId: 'areaId Missing Competence',
            skillIds: ['skillId Missing Competence'],
            thematicIds: ['thematicId Missing Competence'],
            origin: 'origin Missing Competence',
            name_i18n: {
              fr: 'name_i18n FR Missing Competence',
              en: 'name_i18n EN Missing Competence',
            },
            description_i18n: {
              fr: 'description_i18n FR Missing Competence',
              nl: 'description_i18n NL Missing Competence',
            },
          },
          {
            id: 'newCompetenceId',
            index: 'index New Competence',
            areaId: 'areaId New Competence',
            skillIds: ['skillId New Competence'],
            thematicIds: ['thematicId New Competence'],
            origin: 'origin New Competence',
            name_i18n: {
              fr: 'name_i18n FR New Competence',
              en: 'name_i18n EN New Competence',
            },
            description_i18n: {
              fr: 'description_i18n FR New Competence',
              nl: 'description_i18n NL New Competence',
            },
          },
          {
            id: 'untouchedCompetenceId',
            index: 'index Untouched Competence',
            areaId: 'areaId Untouched Competence',
            skillIds: ['skillId Untouched Competence'],
            thematicIds: ['thematicId Untouched Competence'],
            origin: 'origin Untouched Competence',
            name_i18n: {
              fr: 'name_i18n FR Untouched Competence',
              en: 'name_i18n EN Untouched Competence',
            },
            description_i18n: {
              fr: 'description_i18n FR Untouched Competence',
              nl: 'description_i18n NL Untouched Competence',
            },
          },
        ]);
        const refreshedThematics = await knex.select('*').from('learningcontent.thematics').orderBy('id');
        expect(refreshedThematics).to.deep.equal([
          {
            id: 'aboutToBeRefreshedThematicId',
            name_i18n: {
              fr: 'name_i18n FR About to be refreshed Thematique - new',
              nl: 'name_i18n NL About to be refreshed Thematique - new',
            },
            index: 11,
            competenceId: 'competenceId About to be refreshed Thematique - new',
            tubeIds: ['tubeId About to be refreshed Thematique - new'],
          },
          {
            id: 'missingThematicId',
            name_i18n: {
              fr: 'name_i18n FR Missing Thematique',
              en: 'name_i18n EN Missing Thematique',
            },
            index: 4,
            competenceId: 'competenceId Missing Thematique',
            tubeIds: ['tubeId Missing Thematique'],
          },
          {
            id: 'newThematicId',
            name_i18n: {
              fr: 'name_i18n FR New Thematique',
              en: 'name_i18n EN New Thematique',
            },
            index: 3,
            competenceId: 'competenceId New Thematique',
            tubeIds: ['tubeId New Thematique'],
          },
          {
            id: 'untouchedThematicId',
            name_i18n: {
              fr: 'name_i18n FR Untouched Thematique',
              en: 'name_i18n EN Untouched Thematique',
            },
            index: 2,
            competenceId: 'competenceId Untouched Thematique',
            tubeIds: ['tubeId Untouched Thematique'],
          },
        ]);
        const refreshedTubes = await knex.select('*').from('learningcontent.tubes').orderBy('id');
        expect(refreshedTubes).to.deep.equal([
          {
            id: 'aboutToBeRefreshedTubeId',
            name: 'name About to be refreshed Tube - new',
            title: 'title About to be refreshed Tube - new',
            description: 'description About to be refreshed Tube - new',
            practicalTitle_i18n: {
              fr: 'practicalTitle FR About to be refreshed Tube - new',
              nl: 'practicalTitle NL About to be refreshed Tube - new',
            },
            practicalDescription_i18n: {
              fr: 'practicalDescription FR About to be refreshed Tube - new',
              en: 'practicalDescription EN About to be refreshed Tube - new',
            },
            competenceId: 'competenceId About to be refreshed Tube - new',
            thematicId: 'thematicId About to be refreshed Tube - new',
            skillIds: ['skillId About to be refreshed Tube - new'],
            isMobileCompliant: true,
            isTabletCompliant: true,
          },
          {
            id: 'missingTubeId',
            name: 'name Missing Tube',
            title: 'title Missing Tube',
            description: 'description Missing Tube',
            practicalTitle_i18n: {
              fr: 'practicalTitle FR Missing Tube',
              en: 'practicalTitle EN Missing Tube',
            },
            practicalDescription_i18n: {
              fr: 'practicalDescription FR Missing Tube',
              en: 'practicalDescription EN Missing Tube',
            },
            competenceId: 'competenceId Missing Tube',
            thematicId: 'thematicId Missing Tube',
            skillIds: ['skillId Missing Tube'],
            isMobileCompliant: true,
            isTabletCompliant: true,
          },
          {
            id: 'newTubeId',
            name: 'name New Tube',
            title: 'title New Tube',
            description: 'description New Tube',
            practicalTitle_i18n: {
              fr: 'practicalTitle FR New Tube',
              en: 'practicalTitle EN New Tube',
            },
            practicalDescription_i18n: {
              fr: 'practicalDescription FR New Tube',
              en: 'practicalDescription EN New Tube',
            },
            competenceId: 'competenceId New Tube',
            thematicId: 'thematicId New Tube',
            skillIds: ['skillId New Tube'],
            isMobileCompliant: true,
            isTabletCompliant: false,
          },
          {
            id: 'untouchedTubeId',
            name: 'name Untouched Tube',
            title: 'title Untouched Tube',
            description: 'description Untouched Tube',
            practicalTitle_i18n: {
              fr: 'practicalTitle FR Untouched Tube',
              en: 'practicalTitle EN Untouched Tube',
            },
            practicalDescription_i18n: {
              fr: 'practicalDescription FR Untouched Tube',
              en: 'practicalDescription EN Untouched Tube',
            },
            competenceId: 'competenceId Untouched Tube',
            thematicId: 'thematicId Untouched Tube',
            skillIds: ['skillId Untouched Tube'],
            isMobileCompliant: false,
            isTabletCompliant: true,
          },
        ]);
        const refreshedSkills = await knex.select('*').from('learningcontent.skills').orderBy('id');
        expect(refreshedSkills).to.deep.equal([
          {
            id: 'aboutToBeRefreshedSkillId',
            name: 'name about to be refreshed skill - new',
            hintStatus: 'hintStatus about to be refreshed skill - new',
            tutorialIds: [
              'tutorialId1 about to be refreshed skill - new',
              'tutorialId2 about to be refreshed skill - new',
            ],
            learningMoreTutorialIds: [
              'learningMoreTutorialId1 about to be refreshed skill - new',
              'learningMoreTutorialId2 about to be refreshed skill - new',
            ],
            pixValue: 2,
            competenceId: 'competenceId about to be refreshed skill - new',
            status: 'status about to be refreshed skill - new',
            tubeId: 'tubeId about to be refreshed skill - new',
            version: 2,
            level: 2,
            hint_i18n: {
              fr: 'hint_i18n.fr about to be refreshed skill - new',
              en: 'hint_i18n.en about to be refreshed skill - new',
              nl: 'hint_i18n.nl about to be refreshed skill - new',
            },
          },
          {
            id: 'missingSkillId',
            name: 'name missing skill',
            hintStatus: 'hintStatus missing skill',
            tutorialIds: ['tutorialId1 missing skill', 'tutorialId2 missing skill'],
            learningMoreTutorialIds: ['learningMoreTutorialId1 missing skill', 'learningMoreTutorialId2 missing skill'],
            pixValue: 5,
            competenceId: 'competenceId missing skill',
            status: 'status missing skill',
            tubeId: 'tubeId missing skill',
            version: 5,
            level: 5,
            hint_i18n: {
              fr: 'hint_i18n.fr missing skill',
              en: 'hint_i18n.en missing skill',
              nl: 'hint_i18n.nl missing skill',
            },
          },
          {
            id: 'newSkillId',
            name: 'name new skill',
            hintStatus: 'hintStatus new skill',
            tutorialIds: ['tutorialId1 new skill', 'tutorialId2 new skill'],
            learningMoreTutorialIds: ['learningMoreTutorialId1 new skill', 'learningMoreTutorialId2 new skill'],
            pixValue: 4,
            competenceId: 'competenceId new skill',
            status: 'status new skill',
            tubeId: 'tubeId new skill',
            version: 4,
            level: 4,
            hint_i18n: {
              fr: 'hint_i18n.fr new skill',
              en: 'hint_i18n.en new skill',
              nl: 'hint_i18n.nl new skill',
            },
          },
          {
            id: 'untouchedSkillId',
            name: 'name untouched skill',
            hintStatus: 'hintStatus untouched skill',
            tutorialIds: ['tutorialId1 untouched skill', 'tutorialId2 untouched skill'],
            learningMoreTutorialIds: [
              'learningMoreTutorialId1 untouched skill',
              'learningMoreTutorialId2 untouched skill',
            ],
            pixValue: 3,
            competenceId: 'competenceId untouched skill',
            status: 'status untouched skill',
            tubeId: 'tubeId untouched skill',
            version: 3,
            level: 3,
            hint_i18n: {
              fr: 'hint_i18n.fr untouched skill',
              en: 'hint_i18n.en untouched skill',
              nl: 'hint_i18n.nl untouched skill',
            },
          },
        ]);
        const refreshedChallenges = await knex.select('*').from('learningcontent.challenges').orderBy('id');
        expect(refreshedChallenges).to.deep.equal([
          {
            id: 'aboutToBeRefreshedChallengeId',
            instruction: 'instruction About to be refreshed Epreuve - new',
            alternativeInstruction: 'alternativeInstruction About to be refreshed Epreuve - new',
            proposals: 'proposals About to be refreshed Epreuve - new',
            type: 'type About to be refreshed Epreuve - new',
            solution: 'solution About to be refreshed Epreuve - new',
            solutionToDisplay: 'solutionToDisplay About to be refreshed Epreuve - new',
            t1Status: true,
            t2Status: true,
            t3Status: true,
            status: 'status About to be refreshed Epreuve - new',
            genealogy: 'genealogy About to be refreshed Epreuve - new',
            accessibility1: 'accessibility1 About to be refreshed Epreuve - new',
            accessibility2: 'accessibility2 About to be refreshed Epreuve - new',
            requireGafamWebsiteAccess: true,
            isIncompatibleIpadCertif: true,
            deafAndHardOfHearing: 'deafAndHardOfHearing About to be refreshed Epreuve - new',
            isAwarenessChallenge: true,
            toRephrase: true,
            alternativeVersion: 8,
            shuffled: true,
            illustrationAlt: 'illustrationAlt About to be refreshed Epreuve - new',
            illustrationUrl: 'illustrationUrl About to be refreshed Epreuve - new',
            attachments: [
              'attachment1 About to be refreshed Epreuve - new',
              'attachment2 About to be refreshed Epreuve - new',
            ],
            responsive: 'responsive About to be refreshed Epreuve - new',
            alpha: 1.1,
            delta: 3.3,
            autoReply: true,
            focusable: true,
            format: 'format About to be refreshed Epreuve - new',
            timer: 180,
            embedHeight: 800,
            embedUrl: 'embedUrl About to be refreshed Epreuve - new',
            embedTitle: 'embedTitle About to be refreshed Epreuve - new',
            locales: ['fr'],
            competenceId: 'competenceId About to be refreshed Epreuve - new',
            skillId: 'skillId About to be refreshed Epreuve - new',
          },
          {
            id: 'missingChallengeId',
            instruction: 'instruction Missing Epreuve',
            alternativeInstruction: 'alternativeInstruction Missing Epreuve',
            proposals: 'proposals Missing Epreuve',
            type: 'type Missing Epreuve',
            solution: 'solution Missing Epreuve',
            solutionToDisplay: 'solutionToDisplay Missing Epreuve',
            t1Status: false,
            t2Status: true,
            t3Status: true,
            status: 'status Missing Epreuve',
            genealogy: 'genealogy Missing Epreuve',
            accessibility1: 'accessibility1 Missing Epreuve',
            accessibility2: 'accessibility2 Missing Epreuve',
            requireGafamWebsiteAccess: false,
            isIncompatibleIpadCertif: true,
            deafAndHardOfHearing: 'deafAndHardOfHearing Missing Epreuve',
            isAwarenessChallenge: true,
            toRephrase: true,
            alternativeVersion: 99,
            shuffled: true,
            illustrationAlt: 'illustrationAlt Missing Epreuve',
            illustrationUrl: 'illustrationUrl Missing Epreuve',
            attachments: ['attachment8 Missing Epreuve'],
            responsive: 'responsive Missing Epreuve',
            alpha: 58.2,
            delta: 20.4,
            autoReply: true,
            focusable: true,
            format: 'format Missing Epreuve',
            timer: null,
            embedHeight: 55,
            embedUrl: 'embedUrl Missing Epreuve',
            embedTitle: 'embedTitle Missing Epreuve',
            locales: ['en', 'nl'],
            competenceId: 'competenceId Missing Epreuve',
            skillId: 'skillId Missing Epreuve',
          },
          {
            id: 'newChallengeId',
            instruction: 'instruction New Epreuve',
            alternativeInstruction: 'alternativeInstruction New Epreuve',
            proposals: 'proposals New Epreuve',
            type: 'type New Epreuve',
            solution: 'solution New Epreuve',
            solutionToDisplay: 'solutionToDisplay New Epreuve',
            t1Status: false,
            t2Status: false,
            t3Status: true,
            status: 'status New Epreuve',
            genealogy: 'genealogy New Epreuve',
            accessibility1: 'accessibility1 New Epreuve',
            accessibility2: 'accessibility2 New Epreuve',
            requireGafamWebsiteAccess: false,
            isIncompatibleIpadCertif: true,
            deafAndHardOfHearing: 'deafAndHardOfHearing New Epreuve',
            isAwarenessChallenge: false,
            toRephrase: true,
            alternativeVersion: 15,
            shuffled: true,
            illustrationAlt: 'illustrationAlt New Epreuve',
            illustrationUrl: 'illustrationUrl New Epreuve',
            attachments: ['attachment1 New Epreuve'],
            responsive: 'responsive New Epreuve',
            alpha: 100.1,
            delta: 200.2,
            autoReply: false,
            focusable: true,
            format: 'format New Epreuve',
            timer: 250,
            embedHeight: null,
            embedUrl: 'embedUrl New Epreuve',
            embedTitle: 'embedTitle New Epreuve',
            locales: ['fr', 'nl'],
            competenceId: 'competenceId New Epreuve',
            skillId: 'skillId New Epreuve',
          },
          {
            id: 'untouchedChallengeId',
            instruction: 'instruction Untouched Epreuve',
            alternativeInstruction: 'alternativeInstruction Untouched Epreuve',
            proposals: 'proposals Untouched Epreuve',
            type: 'type Untouched Epreuve',
            solution: 'solution Untouched Epreuve',
            solutionToDisplay: 'solutionToDisplay Untouched Epreuve',
            t1Status: false,
            t2Status: true,
            t3Status: false,
            status: 'status Untouched Epreuve',
            genealogy: 'genealogy Untouched Epreuve',
            accessibility1: 'accessibility1 Untouched Epreuve',
            accessibility2: 'accessibility2 Untouched Epreuve',
            requireGafamWebsiteAccess: true,
            isIncompatibleIpadCertif: false,
            deafAndHardOfHearing: 'deafAndHardOfHearing Untouched Epreuve',
            isAwarenessChallenge: true,
            toRephrase: true,
            alternativeVersion: 5,
            shuffled: false,
            illustrationAlt: 'illustrationAlt Untouched Epreuve',
            illustrationUrl: 'illustrationUrl Untouched Epreuve',
            attachments: [],
            responsive: 'responsive Untouched Epreuve',
            alpha: 77,
            delta: 66,
            autoReply: true,
            focusable: false,
            format: 'format Untouched Epreuve',
            timer: null,
            embedHeight: 1800,
            embedUrl: 'embedUrl Untouched Epreuve',
            embedTitle: 'embedTitle Untouched Epreuve',
            locales: ['fr', 'en'],
            competenceId: 'competenceId Untouched Epreuve',
            skillId: 'skillId Untouched Epreuve',
          },
        ]);
        const refreshedCourses = await knex.select('*').from('learningcontent.courses').orderBy('id');
        expect(refreshedCourses).to.deep.equal([
          {
            id: 'aboutToBeRefreshedCourseId',
            name: 'name About to be refreshed Course - new',
            description: 'description About to be refreshed Course - new',
            isActive: true,
            competences: ['competenceId About to be refreshed Course - new'],
            challenges: ['challengeId About to be refreshed Course - new'],
          },
          {
            id: 'missingCourseId',
            name: 'name Missing',
            description: 'description Missing',
            isActive: true,
            competences: ['competenceId Missing'],
            challenges: ['challengeId Missing'],
          },
          {
            id: 'newCourseId',
            name: 'name New',
            description: 'description New',
            isActive: true,
            competences: ['competenceId New'],
            challenges: ['challengeId New'],
          },
          {
            id: 'untouchedCourseId',
            name: 'name Untouched',
            description: 'description Untouched',
            isActive: false,
            competences: ['competenceId Untouched'],
            challenges: ['challengeId Untouched'],
          },
        ]);
        const refreshedTutorials = await knex.select('*').from('learningcontent.tutorials').orderBy('id');
        expect(refreshedTutorials).to.deep.equal([
          {
            id: 'aboutToBeRefreshedTutorialId',
            duration: 'duration About to be refreshed Tutoriel - new',
            format: 'format About to be refreshed Tutoriel - new',
            title: 'title About to be refreshed Tutoriel - new',
            source: 'source About to be refreshed Tutoriel - new',
            link: 'link About to be refreshed Tutoriel - new',
            locale: 'fr',
          },
          {
            id: 'missingTutorialId',
            duration: 'duration Missing Tutorial',
            format: 'format Missing Tutorial',
            title: 'title Missing Tutorial',
            source: 'source Missing Tutorial',
            link: 'link Missing Tutorial',
            locale: 'fr',
          },
          {
            id: 'newTutorialId',
            duration: 'duration New Tutorial',
            format: 'format New Tutorial',
            title: 'title New Tutorial',
            source: 'source New Tutorial',
            link: 'link New Tutorial',
            locale: 'fr',
          },
          {
            id: 'untouchedTutorialId',
            duration: 'duration Untouched Tutorial',
            format: 'format Untouched Tutorial',
            title: 'title Untouched Tutorial',
            source: 'source Untouched Tutorial',
            link: 'link Untouched Tutorial',
            locale: 'nl',
          },
        ]);
        const refreshedMissions = await knex.select('*').from('learningcontent.missions').orderBy('id');
        expect(refreshedMissions).to.deep.equal([
          {
            id: 1,
            status: 'status About to be refreshed Mission - new',
            name_i18n: {
              fr: 'name FR About to be refreshed Mission - new',
              en: 'name EN About to be refreshed Mission - new',
            },
            content: { some: 'content About to be refreshed Mission - new' },
            learningObjectives_i18n: {
              fr: 'learningObjectives FR About to be refreshed Mission - new',
              en: 'learningObjectives EN About to be refreshed Mission - new',
            },
            validatedObjectives_i18n: {
              fr: 'validatedObjectives FR About to be refreshed Mission - new',
              en: 'validatedObjectives EN About to be refreshed Mission - new',
            },
            introductionMediaType: 'introductionMediaType About to be refreshed Mission - new',
            introductionMediaUrl: 'introductionMediaUrl About to be refreshed Mission - new',
            introductionMediaAlt_i18n: {
              fr: 'introductionMediaAlt FR About to be refreshed Mission - new',
              en: 'introductionMediaAlt EN About to be refreshed Mission - new',
            },
            documentationUrl: 'documentationUrl About to be refreshed Mission - new',
            cardImageUrl: 'cardImageUrl About to be refreshed Mission - new',
            competenceId: 'competenceId About to be refreshed Mission - new',
          },
          {
            id: 2,
            status: 'status Untouched Mission',
            name_i18n: {
              fr: 'name FR Untouched Mission',
              en: 'name EN Untouched Mission',
            },
            content: { some: 'content Untouched Mission' },
            learningObjectives_i18n: {
              fr: 'learningObjectives FR Untouched Mission',
              en: 'learningObjectives EN Untouched Mission',
            },
            validatedObjectives_i18n: {
              fr: 'validatedObjectives FR Untouched Mission',
              en: 'validatedObjectives EN Untouched Mission',
            },
            introductionMediaType: 'introductionMediaType Untouched Mission',
            introductionMediaUrl: 'introductionMediaUrl Untouched Mission',
            introductionMediaAlt_i18n: {
              fr: 'introductionMediaAlt FR Untouched Mission',
              en: 'introductionMediaAlt EN Untouched Mission',
            },
            documentationUrl: 'documentationUrl Untouched Mission',
            cardImageUrl: 'cardImageUrl Untouched Mission',
            competenceId: 'competenceId Untouched Mission',
          },
          {
            id: 3,
            status: 'status Missing Mission',
            name_i18n: {
              fr: 'name FR Missing Mission',
              en: 'name EN Missing Mission',
            },
            content: { some: 'content Missing Mission' },
            learningObjectives_i18n: {
              fr: 'learningObjectives FR Missing Mission',
              en: 'learningObjectives EN Missing Mission',
            },
            validatedObjectives_i18n: {
              fr: 'validatedObjectives FR Missing Mission',
              en: 'validatedObjectives EN Missing Mission',
            },
            introductionMediaType: 'introductionMediaType Missing Mission',
            introductionMediaUrl: 'introductionMediaUrl Missing Mission',
            introductionMediaAlt_i18n: {
              fr: 'introductionMediaAlt FR Missing Mission',
              en: 'introductionMediaAlt EN Missing Mission',
            },
            documentationUrl: 'documentationUrl Missing Mission',
            cardImageUrl: 'cardImageUrl Missing Mission',
            competenceId: 'competenceId Missing Mission',
          },
          {
            id: 4,
            status: 'status New Mission',
            name_i18n: {
              fr: 'name FR New Mission',
              en: 'name EN New Mission',
            },
            content: { some: 'content New Mission' },
            learningObjectives_i18n: {
              fr: 'learningObjectives FR New Mission',
              en: 'learningObjectives EN New Mission',
            },
            validatedObjectives_i18n: {
              fr: 'validatedObjectives FR New Mission',
              en: 'validatedObjectives EN New Mission',
            },
            introductionMediaType: 'introductionMediaType New Mission',
            introductionMediaUrl: 'introductionMediaUrl New Mission',
            introductionMediaAlt_i18n: {
              fr: 'introductionMediaAlt FR New Mission',
              en: 'introductionMediaAlt EN New Mission',
            },
            documentationUrl: 'documentationUrl New Mission',
            cardImageUrl: 'cardImageUrl New Mission',
            competenceId: 'competenceId New Mission',
          },
        ]);
        expect(lcmsApiCall.isDone()).to.be.true;
      });
    });

    context('failure', function () {
      beforeEach(function () {
        newLearningContent.missions[0].id = null;
        lcmsApiCall = nock('https://lcms-test.pix.fr/api')
          .get('/releases/latest')
          .matchHeader('Authorization', 'Bearer test-api-key')
          .reply(200, { content: newLearningContent });
      });

      it('should update nothing', async function () {
        // when
        await catchErr(lcmsRefreshCacheJobController.handle)();

        // then
        const refreshedFrameworks = await knex.select('*').from('learningcontent.frameworks').orderBy('name');
        expect(refreshedFrameworks).to.deep.equal([
          { id: 'aboutToBeRefreshedFrameworkId', name: 'name About to be refreshed Framework - old' },
          { id: 'missingFrameworkId', name: 'name Missing Framework' },
          { id: 'untouchedFrameworkId', name: 'name Untouched Framework' },
        ]);
        const refreshedAreas = await knex.select('*').from('learningcontent.areas').orderBy('id');
        expect(refreshedAreas).to.deep.equal([
          {
            id: 'aboutToBeRefreshedAreaId',
            name: 'name About to be refreshed Domaine - old',
            code: 'code About to be refreshed Domaine - old',
            title_i18n: {
              fr: 'title_i18n FR About to be refreshed Domaine - old',
              nl: 'title_i18n NL About to be refreshed Domaine - old',
            },
            color: 'color About to be refreshed Domaine - old',
            frameworkId: 'frameworkId About to be refreshed Domaine - old',
            competenceIds: [
              'competenceId1 About to be refreshed Domaine - old',
              'competenceId2 About to be refreshed Domaine - old',
            ],
          },
          {
            id: 'missingAreaId',
            name: 'name Missing Domaine',
            code: 'code Missing Domaine',
            title_i18n: { fr: 'title_i18n FR Missing Domaine', nl: 'title_i18n NL Missing Domaine' },
            color: 'color Missing Domaine',
            frameworkId: 'frameworkId Missing Domaine',
            competenceIds: ['competenceId Missing Domaine'],
          },
          {
            id: 'untouchedAreaId',
            name: 'name Untouched Domaine',
            code: 'code Untouched Domaine',
            title_i18n: { fr: 'title_i18n FR Untouched Domaine', nl: 'title_i18n NL Untouched Domaine' },
            color: 'color Untouched Domaine',
            frameworkId: 'frameworkId Untouched Domaine',
            competenceIds: ['competenceId Untouched Domaine'],
          },
        ]);
        const refreshedCompetences = await knex.select('*').from('learningcontent.competences').orderBy('id');
        expect(refreshedCompetences).to.deep.equal([
          {
            id: 'aboutToBeRefreshedCompetenceId',
            index: 'index About to be refreshed Competence - old',
            areaId: 'areaId About to be refreshed Competence - old',
            skillIds: ['skillId About to be refreshed Competence - old'],
            thematicIds: ['thematicId About to be refreshed Competence - old'],
            origin: 'origin About to be refreshed Competence - old',
            name_i18n: {
              fr: 'name_i18n FR About to be refreshed Competence - old',
              nl: 'name_i18n NL About to be refreshed Competence - old',
            },
            description_i18n: {
              fr: 'description_i18n FR About to be refreshed Competence - old',
              en: 'description_i18n EN About to be refreshed Competence - old',
            },
          },
          {
            id: 'missingCompetenceId',
            index: 'index Missing Competence',
            areaId: 'areaId Missing Competence',
            skillIds: ['skillId Missing Competence'],
            thematicIds: ['thematicId Missing Competence'],
            origin: 'origin Missing Competence',
            name_i18n: {
              fr: 'name_i18n FR Missing Competence',
              en: 'name_i18n EN Missing Competence',
            },
            description_i18n: {
              fr: 'description_i18n FR Missing Competence',
              nl: 'description_i18n NL Missing Competence',
            },
          },
          {
            id: 'untouchedCompetenceId',
            index: 'index Untouched Competence',
            areaId: 'areaId Untouched Competence',
            skillIds: ['skillId Untouched Competence'],
            thematicIds: ['thematicId Untouched Competence'],
            origin: 'origin Untouched Competence',
            name_i18n: {
              fr: 'name_i18n FR Untouched Competence',
              en: 'name_i18n EN Untouched Competence',
            },
            description_i18n: {
              fr: 'description_i18n FR Untouched Competence',
              nl: 'description_i18n NL Untouched Competence',
            },
          },
        ]);
        const refreshedThematics = await knex.select('*').from('learningcontent.thematics').orderBy('id');
        expect(refreshedThematics).to.deep.equal([
          {
            id: 'aboutToBeRefreshedThematicId',
            name_i18n: {
              fr: 'name_i18n FR About to be refreshed Thematique - old',
              en: 'name_i18n EN About to be refreshed Thematique - old',
            },
            index: 1,
            competenceId: 'competenceId About to be refreshed Thematique - old',
            tubeIds: ['tubeId About to be refreshed Thematique - old'],
          },
          {
            id: 'missingThematicId',
            name_i18n: {
              fr: 'name_i18n FR Missing Thematique',
              en: 'name_i18n EN Missing Thematique',
            },
            index: 4,
            competenceId: 'competenceId Missing Thematique',
            tubeIds: ['tubeId Missing Thematique'],
          },
          {
            id: 'untouchedThematicId',
            name_i18n: {
              fr: 'name_i18n FR Untouched Thematique',
              en: 'name_i18n EN Untouched Thematique',
            },
            index: 2,
            competenceId: 'competenceId Untouched Thematique',
            tubeIds: ['tubeId Untouched Thematique'],
          },
        ]);
        const refreshedTubes = await knex.select('*').from('learningcontent.tubes').orderBy('id');
        expect(refreshedTubes).to.deep.equal([
          {
            id: 'aboutToBeRefreshedTubeId',
            name: 'name About to be refreshed Tube - old',
            title: 'title About to be refreshed Tube - old',
            description: 'description About to be refreshed Tube - old',
            practicalTitle_i18n: {
              fr: 'practicalTitle FR About to be refreshed Tube - old',
              en: 'practicalTitle EN About to be refreshed Tube - old',
            },
            practicalDescription_i18n: {
              fr: 'practicalDescription FR About to be refreshed Tube - old',
              en: 'practicalDescription EN About to be refreshed Tube - old',
            },
            competenceId: 'competenceId About to be refreshed Tube - old',
            thematicId: 'thematicId About to be refreshed Tube - old',
            skillIds: ['skillId About to be refreshed Tube - old'],
            isMobileCompliant: false,
            isTabletCompliant: true,
          },
          {
            id: 'missingTubeId',
            name: 'name Missing Tube',
            title: 'title Missing Tube',
            description: 'description Missing Tube',
            practicalTitle_i18n: {
              fr: 'practicalTitle FR Missing Tube',
              en: 'practicalTitle EN Missing Tube',
            },
            practicalDescription_i18n: {
              fr: 'practicalDescription FR Missing Tube',
              en: 'practicalDescription EN Missing Tube',
            },
            competenceId: 'competenceId Missing Tube',
            thematicId: 'thematicId Missing Tube',
            skillIds: ['skillId Missing Tube'],
            isMobileCompliant: true,
            isTabletCompliant: true,
          },
          {
            id: 'untouchedTubeId',
            name: 'name Untouched Tube',
            title: 'title Untouched Tube',
            description: 'description Untouched Tube',
            practicalTitle_i18n: {
              fr: 'practicalTitle FR Untouched Tube',
              en: 'practicalTitle EN Untouched Tube',
            },
            practicalDescription_i18n: {
              fr: 'practicalDescription FR Untouched Tube',
              en: 'practicalDescription EN Untouched Tube',
            },
            competenceId: 'competenceId Untouched Tube',
            thematicId: 'thematicId Untouched Tube',
            skillIds: ['skillId Untouched Tube'],
            isMobileCompliant: false,
            isTabletCompliant: true,
          },
        ]);
        const refreshedSkills = await knex.select('*').from('learningcontent.skills').orderBy('id');
        expect(refreshedSkills).to.deep.equal([
          {
            id: 'aboutToBeRefreshedSkillId',
            name: 'name about to be refreshed skill - old',
            hintStatus: 'hintStatus about to be refreshed skill - old',
            tutorialIds: [
              'tutorialId1 about to be refreshed skill - old',
              'tutorialId2 about to be refreshed skill - old',
            ],
            learningMoreTutorialIds: [
              'learningMoreTutorialId1 about to be refreshed skill - old',
              'learningMoreTutorialId2 about to be refreshed skill - old',
            ],
            pixValue: 1,
            competenceId: 'competenceId about to be refreshed skill - old',
            status: 'status about to be refreshed skill - old',
            tubeId: 'tubeId about to be refreshed skill - old',
            version: 1,
            level: 1,
            hint_i18n: {
              fr: 'hint_i18n.fr about to be refreshed skill - old',
              en: 'hint_i18n.en about to be refreshed skill - old',
              nl: 'hint_i18n.nl about to be refreshed skill - old',
            },
          },
          {
            id: 'missingSkillId',
            name: 'name missing skill',
            hintStatus: 'hintStatus missing skill',
            tutorialIds: ['tutorialId1 missing skill', 'tutorialId2 missing skill'],
            learningMoreTutorialIds: ['learningMoreTutorialId1 missing skill', 'learningMoreTutorialId2 missing skill'],
            pixValue: 5,
            competenceId: 'competenceId missing skill',
            status: 'status missing skill',
            tubeId: 'tubeId missing skill',
            version: 5,
            level: 5,
            hint_i18n: {
              fr: 'hint_i18n.fr missing skill',
              en: 'hint_i18n.en missing skill',
              nl: 'hint_i18n.nl missing skill',
            },
          },
          {
            id: 'untouchedSkillId',
            name: 'name untouched skill',
            hintStatus: 'hintStatus untouched skill',
            tutorialIds: ['tutorialId1 untouched skill', 'tutorialId2 untouched skill'],
            learningMoreTutorialIds: [
              'learningMoreTutorialId1 untouched skill',
              'learningMoreTutorialId2 untouched skill',
            ],
            pixValue: 3,
            competenceId: 'competenceId untouched skill',
            status: 'status untouched skill',
            tubeId: 'tubeId untouched skill',
            version: 3,
            level: 3,
            hint_i18n: {
              fr: 'hint_i18n.fr untouched skill',
              en: 'hint_i18n.en untouched skill',
              nl: 'hint_i18n.nl untouched skill',
            },
          },
        ]);
        const refreshedChallenges = await knex.select('*').from('learningcontent.challenges').orderBy('id');
        expect(refreshedChallenges).to.deep.equal([
          {
            id: 'aboutToBeRefreshedChallengeId',
            instruction: 'instruction About to be refreshed Epreuve - old',
            alternativeInstruction: 'alternativeInstruction About to be refreshed Epreuve - old',
            proposals: 'proposals About to be refreshed Epreuve - old',
            type: 'type About to be refreshed Epreuve - old',
            solution: 'solution About to be refreshed Epreuve - old',
            solutionToDisplay: 'solutionToDisplay About to be refreshed Epreuve - old',
            t1Status: false,
            t2Status: true,
            t3Status: false,
            status: 'status About to be refreshed Epreuve - old',
            genealogy: 'genealogy About to be refreshed Epreuve - old',
            accessibility1: 'accessibility1 About to be refreshed Epreuve - old',
            accessibility2: 'accessibility2 About to be refreshed Epreuve - old',
            requireGafamWebsiteAccess: true,
            isIncompatibleIpadCertif: true,
            deafAndHardOfHearing: 'deafAndHardOfHearing About to be refreshed Epreuve - old',
            isAwarenessChallenge: false,
            toRephrase: true,
            alternativeVersion: 5,
            shuffled: false,
            illustrationAlt: 'illustrationAlt About to be refreshed Epreuve - old',
            illustrationUrl: 'illustrationUrl About to be refreshed Epreuve - old',
            attachments: ['attachment1 About to be refreshed Epreuve - old'],
            responsive: 'responsive About to be refreshed Epreuve - old',
            alpha: 10.5,
            delta: 3.3,
            autoReply: true,
            focusable: false,
            format: 'format About to be refreshed Epreuve - old',
            timer: 180,
            embedHeight: 2800,
            embedUrl: 'embedUrl About to be refreshed Epreuve - old',
            embedTitle: 'embedTitle About to be refreshed Epreuve - old',
            locales: ['fr', 'nl'],
            competenceId: 'competenceId About to be refreshed Epreuve - old',
            skillId: 'skillId About to be refreshed Epreuve - old',
          },
          {
            id: 'missingChallengeId',
            instruction: 'instruction Missing Epreuve',
            alternativeInstruction: 'alternativeInstruction Missing Epreuve',
            proposals: 'proposals Missing Epreuve',
            type: 'type Missing Epreuve',
            solution: 'solution Missing Epreuve',
            solutionToDisplay: 'solutionToDisplay Missing Epreuve',
            t1Status: false,
            t2Status: true,
            t3Status: true,
            status: 'status Missing Epreuve',
            genealogy: 'genealogy Missing Epreuve',
            accessibility1: 'accessibility1 Missing Epreuve',
            accessibility2: 'accessibility2 Missing Epreuve',
            requireGafamWebsiteAccess: false,
            isIncompatibleIpadCertif: true,
            deafAndHardOfHearing: 'deafAndHardOfHearing Missing Epreuve',
            isAwarenessChallenge: true,
            toRephrase: true,
            alternativeVersion: 99,
            shuffled: true,
            illustrationAlt: 'illustrationAlt Missing Epreuve',
            illustrationUrl: 'illustrationUrl Missing Epreuve',
            attachments: ['attachment8 Missing Epreuve'],
            responsive: 'responsive Missing Epreuve',
            alpha: 58.2,
            delta: 20.4,
            autoReply: true,
            focusable: true,
            format: 'format Missing Epreuve',
            timer: null,
            embedHeight: 55,
            embedUrl: 'embedUrl Missing Epreuve',
            embedTitle: 'embedTitle Missing Epreuve',
            locales: ['en', 'nl'],
            competenceId: 'competenceId Missing Epreuve',
            skillId: 'skillId Missing Epreuve',
          },
          {
            id: 'untouchedChallengeId',
            instruction: 'instruction Untouched Epreuve',
            alternativeInstruction: 'alternativeInstruction Untouched Epreuve',
            proposals: 'proposals Untouched Epreuve',
            type: 'type Untouched Epreuve',
            solution: 'solution Untouched Epreuve',
            solutionToDisplay: 'solutionToDisplay Untouched Epreuve',
            t1Status: false,
            t2Status: true,
            t3Status: false,
            status: 'status Untouched Epreuve',
            genealogy: 'genealogy Untouched Epreuve',
            accessibility1: 'accessibility1 Untouched Epreuve',
            accessibility2: 'accessibility2 Untouched Epreuve',
            requireGafamWebsiteAccess: true,
            isIncompatibleIpadCertif: false,
            deafAndHardOfHearing: 'deafAndHardOfHearing Untouched Epreuve',
            isAwarenessChallenge: true,
            toRephrase: true,
            alternativeVersion: 5,
            shuffled: false,
            illustrationAlt: 'illustrationAlt Untouched Epreuve',
            illustrationUrl: 'illustrationUrl Untouched Epreuve',
            attachments: [],
            responsive: 'responsive Untouched Epreuve',
            alpha: 77,
            delta: 66,
            autoReply: true,
            focusable: false,
            format: 'format Untouched Epreuve',
            timer: null,
            embedHeight: 1800,
            embedUrl: 'embedUrl Untouched Epreuve',
            embedTitle: 'embedTitle Untouched Epreuve',
            locales: ['fr', 'en'],
            competenceId: 'competenceId Untouched Epreuve',
            skillId: 'skillId Untouched Epreuve',
          },
        ]);
        const refreshedCourses = await knex.select('*').from('learningcontent.courses').orderBy('id');
        expect(refreshedCourses).to.deep.equal([
          {
            id: 'aboutToBeRefreshedCourseId',
            name: 'name About to be refreshed Course - old',
            description: 'description About to be refreshed Course - old',
            isActive: false,
            competences: [
              'competenceId1 About to be refreshed Course - old',
              'competenceId2 About to be refreshed Course - old',
            ],
            challenges: [
              'challengeId1 About to be refreshed Course - old',
              'challengeId2 About to be refreshed Course - old',
            ],
          },
          {
            id: 'missingCourseId',
            name: 'name Missing',
            description: 'description Missing',
            isActive: true,
            competences: ['competenceId Missing'],
            challenges: ['challengeId Missing'],
          },
          {
            id: 'untouchedCourseId',
            name: 'name Untouched',
            description: 'description Untouched',
            isActive: false,
            competences: ['competenceId Untouched'],
            challenges: ['challengeId Untouched'],
          },
        ]);
        const refreshedTutorials = await knex.select('*').from('learningcontent.tutorials').orderBy('id');
        expect(refreshedTutorials).to.deep.equal([
          {
            id: 'aboutToBeRefreshedTutorialId',
            duration: 'duration About to be refreshed Tutoriel - old',
            format: 'format About to be refreshed Tutoriel - old',
            title: 'title About to be refreshed Tutoriel - old',
            source: 'source About to be refreshed Tutoriel - old',
            link: 'link About to be refreshed Tutoriel - old',
            locale: 'en',
          },
          {
            id: 'missingTutorialId',
            duration: 'duration Missing Tutorial',
            format: 'format Missing Tutorial',
            title: 'title Missing Tutorial',
            source: 'source Missing Tutorial',
            link: 'link Missing Tutorial',
            locale: 'fr',
          },
          {
            id: 'untouchedTutorialId',
            duration: 'duration Untouched Tutorial',
            format: 'format Untouched Tutorial',
            title: 'title Untouched Tutorial',
            source: 'source Untouched Tutorial',
            link: 'link Untouched Tutorial',
            locale: 'nl',
          },
        ]);
        const refreshedMissions = await knex.select('*').from('learningcontent.missions').orderBy('id');
        expect(refreshedMissions).to.deep.equal([
          {
            id: 1,
            status: 'status About to be refreshed Mission - old',
            name_i18n: {
              fr: 'name FR About to be refreshed Mission - old',
              en: 'name EN About to be refreshed Mission - old',
            },
            content: { some: 'content About to be refreshed Mission - old' },
            learningObjectives_i18n: {
              fr: 'learningObjectives FR About to be refreshed Mission - old',
              en: 'learningObjectives EN About to be refreshed Mission - old',
            },
            validatedObjectives_i18n: {
              fr: 'validatedObjectives FR About to be refreshed Mission - old',
              en: 'validatedObjectives EN About to be refreshed Mission - old',
            },
            introductionMediaType: 'introductionMediaType About to be refreshed Mission - old',
            introductionMediaUrl: 'introductionMediaUrl About to be refreshed Mission - old',
            introductionMediaAlt_i18n: {
              fr: 'introductionMediaAlt FR About to be refreshed Mission - old',
              en: 'introductionMediaAlt EN About to be refreshed Mission - old',
            },
            documentationUrl: 'documentationUrl About to be refreshed Mission - old',
            cardImageUrl: 'cardImageUrl About to be refreshed Mission - old',
            competenceId: 'competenceId About to be refreshed Mission - old',
          },
          {
            id: 2,
            status: 'status Untouched Mission',
            name_i18n: {
              fr: 'name FR Untouched Mission',
              en: 'name EN Untouched Mission',
            },
            content: { some: 'content Untouched Mission' },
            learningObjectives_i18n: {
              fr: 'learningObjectives FR Untouched Mission',
              en: 'learningObjectives EN Untouched Mission',
            },
            validatedObjectives_i18n: {
              fr: 'validatedObjectives FR Untouched Mission',
              en: 'validatedObjectives EN Untouched Mission',
            },
            introductionMediaType: 'introductionMediaType Untouched Mission',
            introductionMediaUrl: 'introductionMediaUrl Untouched Mission',
            introductionMediaAlt_i18n: {
              fr: 'introductionMediaAlt FR Untouched Mission',
              en: 'introductionMediaAlt EN Untouched Mission',
            },
            documentationUrl: 'documentationUrl Untouched Mission',
            cardImageUrl: 'cardImageUrl Untouched Mission',
            competenceId: 'competenceId Untouched Mission',
          },
          {
            id: 3,
            status: 'status Missing Mission',
            name_i18n: {
              fr: 'name FR Missing Mission',
              en: 'name EN Missing Mission',
            },
            content: { some: 'content Missing Mission' },
            learningObjectives_i18n: {
              fr: 'learningObjectives FR Missing Mission',
              en: 'learningObjectives EN Missing Mission',
            },
            validatedObjectives_i18n: {
              fr: 'validatedObjectives FR Missing Mission',
              en: 'validatedObjectives EN Missing Mission',
            },
            introductionMediaType: 'introductionMediaType Missing Mission',
            introductionMediaUrl: 'introductionMediaUrl Missing Mission',
            introductionMediaAlt_i18n: {
              fr: 'introductionMediaAlt FR Missing Mission',
              en: 'introductionMediaAlt EN Missing Mission',
            },
            documentationUrl: 'documentationUrl Missing Mission',
            cardImageUrl: 'cardImageUrl Missing Mission',
            competenceId: 'competenceId Missing Mission',
          },
        ]);
        expect(lcmsApiCall.isDone()).to.be.true;
      });
    });
  });
});
